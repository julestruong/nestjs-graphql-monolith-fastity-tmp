# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
  message: Message
  user: User!
}

union AuthUnion = Auth | Message

input LoginInput {
  email: String!
  password: String!
}

type Message {
  id: ID!
  message: String!
}

type Mutation {
  changeTwoFactorAuthentication(activate: Boolean!): Message!
  confirmCredentials: Message!
  confirmEmail(confirmationToken: String!): Auth!
  confirmUserLogin(accessCode: String!, email: String!): Auth!
  deleteAccount(password: String!): Message!
  loginUser(input: LoginInput!): AuthUnion!
  logoutUser: Message!
  registerUser(input: RegisterInput!): Message!
  resetPassword(passwords: PasswordsInput!, resetToken: String!): Message!
  sendResetPasswordEmail(email: String!): Message!
  updateEmail(email: String!, password: String!): Auth!
  updateOnlineStatus(defaultStatus: OnlineStatus!): Message!
  updatePassword(newPasswords: PasswordsInput!, password: String!): Auth!
  updateProfilePicture(picture: Upload!): User!
}

enum OnlineStatus {
  BUSY
  DO_NOT_DISTURB
  IDLE
  INVISIBLE
  OFFLINE
  ONLINE
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type PaginatedUsers {
  edges: [UserEntityPageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PasswordsInput {
  password1: String!
  password2: String!
}

type Query {
  findUsers(after: String, cursor: UsersCursor = DATE, first: Int = 10, order: QueryOrder = DESC, search: String!): PaginatedUsers!
  getCurrentUser: User!
  getUser(username: String!): User!
}

enum QueryOrder {
  ASC
  DESC
  asc
  desc
}

input RegisterInput {
  email: String!
  name: String!
  password1: String!
  password2: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: String!
  email: String
  id: Int!
  lastLogin: String!
  lastOnline: String!
  name: String!
  onlineStatus: OnlineStatus!
  picture: String
  updatedAt: String!
  username: String!
}

type UserEntityPageEdge {
  cursor: String!
  node: User!
}

enum UsersCursor {
  ALPHABET
  DATE
}